require(gridExtra)
require(GGally)
require(corrplot)
require(devtools)
require(caret)
require(regclass)
require(MASS)
require(pROC)
require(nnet)
require(modelr)
require(broom)
require(mnlogit)
require(mlogit)
penguins <- tibble(penguins)
summary(penguins$species)
summary(penguins)
penguins <- na.omit(penguins)
plot1 <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Length and Bill Depth")
plot2 <- ggplot(penguins, aes(x = bill_length_mm, y = flipper_length_mm, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Length and Flipper Length")
plot3 <- ggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Length and Body Mass")
plot4 <- ggplot(penguins, aes(x = bill_depth_mm, y = flipper_length_mm, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Depth and Flipper Length")
plot5 <- ggplot(penguins, aes(x = bill_depth_mm, y = body_mass_g, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Depth and Body Mass")
plot6 <- ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Flipper Length and Body Mass")
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=2, nrow=3)
penguins %>%
dplyr::select(species, body_mass_g, bill_length_mm, bill_depth_mm, flipper_length_mm) %>%
ggpairs(aes(color = species))
penguins <- penguins %>%
mutate(species_rollup = ifelse(species == 'Adelie' | species == 'Chinstrap', 'Adelie-Chinstrap', 'Gentoo'))
table(penguins$species_rollup)
plot7 <- ggplot(penguins, aes(x=body_mass_g)) +
geom_histogram(aes(y=..density..),
binwidth=100,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#619CFF") +
labs(title = "Body Mass Distribution")
plot8 <- ggplot(penguins, aes(x=bill_length_mm)) +
geom_histogram(aes(y=..density..),
binwidth=1,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#619CFF") +
labs(title = "Bill Length (mm) Distribution")
plot9 <- ggplot(penguins, aes(x=bill_depth_mm)) +
geom_histogram(aes(y=..density..),
binwidth=0.5,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#619CFF")  +
labs(title = "Bill Depth (mm) Distribution")
plot10 <- ggplot(penguins, aes(x=flipper_length_mm)) +
geom_histogram(aes(y=..density..),
binwidth=2.5,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#619CFF")  +
labs(title = "Flipper Length (mm) Distribution")
grid.arrange(plot7, plot8, plot9, plot10, ncol=2, nrow=2)
# transform variables
penguins$bill_length_transformed <- abs(penguins$bill_length_mm - mean(penguins$bill_length_mm))^(1/2)
penguins$flipper_length_transformed <- abs(penguins$flipper_length_mm - mean(penguins$flipper_length_mm))^(1/2)
plot11 <- ggplot(penguins, aes(x=bill_length_transformed)) +
geom_histogram(aes(y=..density..),
binwidth=0.15,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#F8776D") +
labs(title = "Bill Length -- Transformed")
plot12 <- ggplot(penguins, aes(x=flipper_length_transformed)) +
geom_histogram(aes(y=..density..),
binwidth=0.15,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#F8776D") +
labs(title = "Flipper Length -- Transformed")
grid.arrange(plot8, plot11, plot10, plot12, ncol=2, nrow=2)
penguins_cont <- penguins %>% dplyr::select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)
correlation = cor(penguins_cont, use = 'pairwise.complete.obs')
corrplot(correlation, method='ellipse')
table(penguins$species_rollup)
penguins_rollup_factor <- factor(penguins$species_rollup)
downsample_penguins <- downSample(penguins, penguins_rollup_factor, list = FALSE, yname = "Class")
table(downsample_penguins$species_rollup)
downsample_penguins$penguins_species_fnl <- ifelse(downsample_penguins$species_rollup == 'Gentoo', 0, 1)
set.seed(1234567)
# utilizing one dataset for all four models
penguins_partition <- createDataPartition(downsample_penguins$species_rollup, p=0.8, list=FALSE)
penguins_training <- downsample_penguins[penguins_partition,]
penguins_testing <- downsample_penguins[-penguins_partition,]
model1 <- glm(penguins_species_fnl ~ bill_length_mm +  flipper_length_mm + body_mass_g , data = penguins_training, family = binomial)
model2 <- model1 %>% stepAIC(trace=FALSE)
summary(model2)
# print variable inflation factor score
print('VIF scores of predictors')
VIF(model2)
model3 <- glm(penguins_species_fnl ~ flipper_length_mm + body_mass_g, data = penguins_training, family = binomial)
summary(model3)
model4 <- glm(penguins_species_fnl ~ flipper_length_mm, data = penguins_training, family = binomial)
summary(model4)
predictTrain = predict(model1, type = "response")
penguins_training$target = round(predictTrain, 1)
table(penguins_training$penguins_species_fnl, predictTrain > 0.5)
penguins_training = penguins_training %>%
mutate(accuracy = 1*(round(target, 0) == round(penguins_species_fnl, 0)))
paste0('Accuracy on Training Set: ', sum(penguins_training$accuracy)/nrow(penguins_training))
predictTest = predict(model1, type = "response", newdata = penguins_testing)
penguins_testing$target = round(predictTest, 1)
confusion_matrix <- table(penguins_testing$penguins_species_fnl, predictTest > 0.5)
confusion_matrix
# tp = true positive
# tn = true negative
# fp = false positive
# fn = false negative
tp <- confusion_matrix[4]
tn <- confusion_matrix[1]
fp <- confusion_matrix[2]
fn <- confusion_matrix[3]
p <- sum(confusion_matrix[3], confusion_matrix[4])
n <- sum(confusion_matrix[1], confusion_matrix[2])
tpr <- tp / p
tnr <- tn / n
fpr <- fp / n
fnr <- fn / p
title_row <- c('True Positive Rate (TPR)', 'True Negative Rate (TNR)', 'False Positive Rate (FPR)', 'False Negative Rate (FNR)')
values <- c(tpr, tnr, fpr, fnr)
results <- data.frame(title_row, values)
colnames(results) <- c('Measure', 'Value')
results
penguins_testing = penguins_testing %>%
mutate(accuracy = 1*(round(target, 0) == round(penguins_species_fnl, 0)))
paste0('Accuracy on Training Set: ', sum(penguins_testing$accuracy)/nrow(penguins_testing))
roc(penguins_testing$penguins_species_fnl ~ predictTest, plot=TRUE, print.auc=TRUE, col='black', lwd=4, legacy.axes=TRUE)
penguins_training_mod <- penguins_training %>% dplyr::select(-target, -accuracy)
penguins_training_mod$outcome_level = relevel(penguins_training_mod$species, ref = "Chinstrap")
multinom_model1 <- multinom(outcome_level ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g + sex + year + bill_length_transformed + flipper_length_transformed, data = penguins_training_mod)
tidy(multinom_model1, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE)
summary(multinom_model1)
multinom_model2 <- multinom(outcome_level ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g, data = penguins_training_mod)
tidy(multinom_model2, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE)
summary(multinom_model2)
multinom_model3 <- multinom(outcome_level ~ bill_length_mm + bill_depth_mm  + body_mass_g, data = penguins_training_mod)
tidy(multinom_model3, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE)
summary(multinom_model3)
predictTest_mod = predict(multinom_model3, type = "probs", newdata = penguins_testing)
predictTest_mod = data.frame(predictTest_mod)
head(predictTest_mod)
target_test <- colnames(predictTest_mod)[apply(predictTest_mod,1,which.max)]
penguins_testing$target = target_test
cmx_test <- table(penguins_testing$target, penguins_testing$target == penguins_testing$species)
cmx_test
knitr::opts_chunk$set(echo = TRUE)
require(palmerpenguins)
require(dplyr)
require(ggplot2)
require(tibble)
require(tidyr)
require(tidyverse)
require(dplyr)
require(ggplot2)
require(ggfortify)
require(gridExtra)
require(GGally)
require(corrplot)
require(devtools)
require(caret)
require(regclass)
require(MASS)
require(pROC)
require(nnet)
require(modelr)
require(broom)
require(mnlogit)
require(mlogit)
penguins <- tibble(penguins)
summary(penguins$species)
summary(penguins)
penguins <- na.omit(penguins)
plot1 <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Length and Bill Depth")
plot2 <- ggplot(penguins, aes(x = bill_length_mm, y = flipper_length_mm, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Length and Flipper Length")
plot3 <- ggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Length and Body Mass")
plot4 <- ggplot(penguins, aes(x = bill_depth_mm, y = flipper_length_mm, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Depth and Flipper Length")
plot5 <- ggplot(penguins, aes(x = bill_depth_mm, y = body_mass_g, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Depth and Body Mass")
plot6 <- ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Flipper Length and Body Mass")
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=2, nrow=3)
penguins %>%
dplyr::select(species, body_mass_g, bill_length_mm, bill_depth_mm, flipper_length_mm) %>%
ggpairs(aes(color = species))
penguins <- penguins %>%
mutate(species_rollup = ifelse(species == 'Adelie' | species == 'Chinstrap', 'Adelie-Chinstrap', 'Gentoo'))
table(penguins$species_rollup)
plot7 <- ggplot(penguins, aes(x=body_mass_g)) +
geom_histogram(aes(y=..density..),
binwidth=100,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#619CFF") +
labs(title = "Body Mass Distribution")
plot8 <- ggplot(penguins, aes(x=bill_length_mm)) +
geom_histogram(aes(y=..density..),
binwidth=1,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#619CFF") +
labs(title = "Bill Length (mm) Distribution")
plot9 <- ggplot(penguins, aes(x=bill_depth_mm)) +
geom_histogram(aes(y=..density..),
binwidth=0.5,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#619CFF")  +
labs(title = "Bill Depth (mm) Distribution")
plot10 <- ggplot(penguins, aes(x=flipper_length_mm)) +
geom_histogram(aes(y=..density..),
binwidth=2.5,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#619CFF")  +
labs(title = "Flipper Length (mm) Distribution")
grid.arrange(plot7, plot8, plot9, plot10, ncol=2, nrow=2)
# transform variables
penguins$bill_length_transformed <- abs(penguins$bill_length_mm - mean(penguins$bill_length_mm))^(1/2)
penguins$flipper_length_transformed <- abs(penguins$flipper_length_mm - mean(penguins$flipper_length_mm))^(1/2)
plot11 <- ggplot(penguins, aes(x=bill_length_transformed)) +
geom_histogram(aes(y=..density..),
binwidth=0.15,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#F8776D") +
labs(title = "Bill Length -- Transformed")
plot12 <- ggplot(penguins, aes(x=flipper_length_transformed)) +
geom_histogram(aes(y=..density..),
binwidth=0.15,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#F8776D") +
labs(title = "Flipper Length -- Transformed")
grid.arrange(plot8, plot11, plot10, plot12, ncol=2, nrow=2)
penguins_cont <- penguins %>% dplyr::select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)
correlation = cor(penguins_cont, use = 'pairwise.complete.obs')
corrplot(correlation, method='ellipse')
table(penguins$species_rollup)
penguins_rollup_factor <- factor(penguins$species_rollup)
downsample_penguins <- downSample(penguins, penguins_rollup_factor, list = FALSE, yname = "Class")
table(downsample_penguins$species_rollup)
downsample_penguins$penguins_species_fnl <- ifelse(downsample_penguins$species_rollup == 'Gentoo', 0, 1)
set.seed(1234567)
# utilizing one dataset for all four models
penguins_partition <- createDataPartition(downsample_penguins$species_rollup, p=0.8, list=FALSE)
penguins_training <- downsample_penguins[penguins_partition,]
penguins_testing <- downsample_penguins[-penguins_partition,]
model1 <- glm(penguins_species_fnl ~ bill_length_mm +  flipper_length_mm + body_mass_g , data = penguins_training, family = binomial)
model2 <- model1 %>% stepAIC(trace=FALSE)
summary(model2)
# print variable inflation factor score
print('VIF scores of predictors')
VIF(model2)
model3 <- glm(penguins_species_fnl ~ flipper_length_mm + body_mass_g, data = penguins_training, family = binomial)
summary(model3)
model4 <- glm(penguins_species_fnl ~ flipper_length_mm, data = penguins_training, family = binomial)
summary(model4)
predictTrain = predict(model1, type = "response")
penguins_training$target = round(predictTrain, 1)
table(penguins_training$penguins_species_fnl, predictTrain > 0.5)
penguins_training = penguins_training %>%
mutate(accuracy = 1*(round(target, 0) == round(penguins_species_fnl, 0)))
paste0('Accuracy on Training Set: ', sum(penguins_training$accuracy)/nrow(penguins_training))
predictTest = predict(model1, type = "response", newdata = penguins_testing)
penguins_testing$target = round(predictTest, 1)
confusion_matrix <- table(penguins_testing$penguins_species_fnl, predictTest > 0.5)
confusion_matrix
# tp = true positive
# tn = true negative
# fp = false positive
# fn = false negative
tp <- confusion_matrix[4]
tn <- confusion_matrix[1]
fp <- confusion_matrix[2]
fn <- confusion_matrix[3]
p <- sum(confusion_matrix[3], confusion_matrix[4])
n <- sum(confusion_matrix[1], confusion_matrix[2])
tpr <- tp / p
tnr <- tn / n
fpr <- fp / n
fnr <- fn / p
title_row <- c('True Positive Rate (TPR)', 'True Negative Rate (TNR)', 'False Positive Rate (FPR)', 'False Negative Rate (FNR)')
values <- c(tpr, tnr, fpr, fnr)
results <- data.frame(title_row, values)
colnames(results) <- c('Measure', 'Value')
results
penguins_testing = penguins_testing %>%
mutate(accuracy = 1*(round(target, 0) == round(penguins_species_fnl, 0)))
paste0('Accuracy on Training Set: ', sum(penguins_testing$accuracy)/nrow(penguins_testing))
roc(penguins_testing$penguins_species_fnl ~ predictTest, plot=TRUE, print.auc=TRUE, col='black', lwd=4, legacy.axes=TRUE)
penguins_training_mod <- penguins_training %>% dplyr::select(-target, -accuracy)
penguins_training_mod$outcome_level = relevel(penguins_training_mod$species, ref = "Chinstrap")
multinom_model1 <- multinom(outcome_level ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g + sex + year + bill_length_transformed + flipper_length_transformed, data = penguins_training_mod)
tidy(multinom_model1, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE)
summary(multinom_model1)
multinom_model2 <- multinom(outcome_level ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g, data = penguins_training_mod)
tidy(multinom_model2, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE)
summary(multinom_model2)
multinom_model3 <- multinom(outcome_level ~ bill_length_mm + bill_depth_mm  + body_mass_g, data = penguins_training_mod)
tidy(multinom_model3, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE)
summary(multinom_model3)
predictTest_mod = predict(multinom_model3, type = "probs", newdata = penguins_testing)
predictTest_mod = data.frame(predictTest_mod)
head(predictTest_mod)
target_test <- colnames(predictTest_mod)[apply(predictTest_mod,1,which.max)]
penguins_testing$target = target_test
cmx_test <- table(penguins_testing$target, penguins_testing$target == penguins_testing$species)
cmx_test
knitr::opts_chunk$set(echo = TRUE)
require(palmerpenguins)
require(dplyr)
require(ggplot2)
require(tibble)
require(tidyr)
require(tidyverse)
require(dplyr)
require(ggplot2)
require(ggfortify)
require(gridExtra)
require(GGally)
require(corrplot)
require(devtools)
require(caret)
require(regclass)
require(MASS)
require(pROC)
require(nnet)
require(modelr)
require(broom)
require(mnlogit)
require(mlogit)
penguins <- tibble(penguins)
summary(penguins$species)
summary(penguins)
penguins <- na.omit(penguins)
plot1 <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Length and Bill Depth")
plot2 <- ggplot(penguins, aes(x = bill_length_mm, y = flipper_length_mm, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Length and Flipper Length")
plot3 <- ggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Length and Body Mass")
plot4 <- ggplot(penguins, aes(x = bill_depth_mm, y = flipper_length_mm, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Depth and Flipper Length")
plot5 <- ggplot(penguins, aes(x = bill_depth_mm, y = body_mass_g, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Bill Depth and Body Mass")
plot6 <- ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, col = species)) +
geom_point() +
theme(legend.position="top") +
labs(title = "Flipper Length and Body Mass")
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=2, nrow=3)
penguins %>%
dplyr::select(species, body_mass_g, bill_length_mm, bill_depth_mm, flipper_length_mm) %>%
ggpairs(aes(color = species))
penguins <- penguins %>%
mutate(species_rollup = ifelse(species == 'Adelie' | species == 'Chinstrap', 'Adelie-Chinstrap', 'Gentoo'))
table(penguins$species_rollup)
plot7 <- ggplot(penguins, aes(x=body_mass_g)) +
geom_histogram(aes(y=..density..),
binwidth=100,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#619CFF") +
labs(title = "Body Mass Distribution")
plot8 <- ggplot(penguins, aes(x=bill_length_mm)) +
geom_histogram(aes(y=..density..),
binwidth=1,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#619CFF") +
labs(title = "Bill Length (mm) Distribution")
plot9 <- ggplot(penguins, aes(x=bill_depth_mm)) +
geom_histogram(aes(y=..density..),
binwidth=0.5,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#619CFF")  +
labs(title = "Bill Depth (mm) Distribution")
plot10 <- ggplot(penguins, aes(x=flipper_length_mm)) +
geom_histogram(aes(y=..density..),
binwidth=2.5,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#619CFF")  +
labs(title = "Flipper Length (mm) Distribution")
grid.arrange(plot7, plot8, plot9, plot10, ncol=2, nrow=2)
# transform variables
penguins$bill_length_transformed <- abs(penguins$bill_length_mm - mean(penguins$bill_length_mm))^(1/2)
penguins$flipper_length_transformed <- abs(penguins$flipper_length_mm - mean(penguins$flipper_length_mm))^(1/2)
plot11 <- ggplot(penguins, aes(x=bill_length_transformed)) +
geom_histogram(aes(y=..density..),
binwidth=0.15,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#F8776D") +
labs(title = "Bill Length -- Transformed")
plot12 <- ggplot(penguins, aes(x=flipper_length_transformed)) +
geom_histogram(aes(y=..density..),
binwidth=0.15,
colour="gray", fill="white") +
geom_density(alpha=.7, fill="#F8776D") +
labs(title = "Flipper Length -- Transformed")
grid.arrange(plot8, plot11, plot10, plot12, ncol=2, nrow=2)
penguins_cont <- penguins %>% dplyr::select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)
correlation = cor(penguins_cont, use = 'pairwise.complete.obs')
corrplot(correlation, method='ellipse')
table(penguins$species_rollup)
penguins_rollup_factor <- factor(penguins$species_rollup)
downsample_penguins <- downSample(penguins, penguins_rollup_factor, list = FALSE, yname = "Class")
table(downsample_penguins$species_rollup)
downsample_penguins$penguins_species_fnl <- ifelse(downsample_penguins$species_rollup == 'Gentoo', 0, 1)
set.seed(1234567)
# utilizing one dataset for all four models
penguins_partition <- createDataPartition(downsample_penguins$species_rollup, p=0.8, list=FALSE)
penguins_training <- downsample_penguins[penguins_partition,]
penguins_testing <- downsample_penguins[-penguins_partition,]
model1 <- glm(penguins_species_fnl ~ bill_length_mm +  flipper_length_mm + body_mass_g , data = penguins_training, family = binomial)
model2 <- model1 %>% stepAIC(trace=FALSE)
summary(model2)
# print variable inflation factor score
print('VIF scores of predictors')
VIF(model2)
model3 <- glm(penguins_species_fnl ~ flipper_length_mm + body_mass_g, data = penguins_training, family = binomial)
summary(model3)
model4 <- glm(penguins_species_fnl ~ flipper_length_mm, data = penguins_training, family = binomial)
summary(model4)
predictTrain = predict(model1, type = "response")
penguins_training$target = round(predictTrain, 1)
table(penguins_training$penguins_species_fnl, predictTrain > 0.5)
penguins_training = penguins_training %>%
mutate(accuracy = 1*(round(target, 0) == round(penguins_species_fnl, 0)))
paste0('Accuracy on Training Set: ', sum(penguins_training$accuracy)/nrow(penguins_training))
predictTest = predict(model1, type = "response", newdata = penguins_testing)
penguins_testing$target = round(predictTest, 1)
confusion_matrix <- table(penguins_testing$penguins_species_fnl, predictTest > 0.5)
confusion_matrix
# tp = true positive
# tn = true negative
# fp = false positive
# fn = false negative
tp <- confusion_matrix[4]
tn <- confusion_matrix[1]
fp <- confusion_matrix[2]
fn <- confusion_matrix[3]
p <- sum(confusion_matrix[3], confusion_matrix[4])
n <- sum(confusion_matrix[1], confusion_matrix[2])
tpr <- tp / p
tnr <- tn / n
fpr <- fp / n
fnr <- fn / p
title_row <- c('True Positive Rate (TPR)', 'True Negative Rate (TNR)', 'False Positive Rate (FPR)', 'False Negative Rate (FNR)')
values <- c(tpr, tnr, fpr, fnr)
results <- data.frame(title_row, values)
colnames(results) <- c('Measure', 'Value')
results
penguins_testing = penguins_testing %>%
mutate(accuracy = 1*(round(target, 0) == round(penguins_species_fnl, 0)))
paste0('Accuracy on Training Set: ', sum(penguins_testing$accuracy)/nrow(penguins_testing))
roc(penguins_testing$penguins_species_fnl ~ predictTest, plot=TRUE, print.auc=TRUE, col='black', lwd=4, legacy.axes=TRUE)
penguins_training_mod <- penguins_training %>% dplyr::select(-target, -accuracy)
penguins_training_mod$outcome_level = relevel(penguins_training_mod$species, ref = "Chinstrap")
multinom_model1 <- multinom(outcome_level ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g + sex + year + bill_length_transformed + flipper_length_transformed, data = penguins_training_mod)
tidy(multinom_model1, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE)
summary(multinom_model1)
multinom_model2 <- multinom(outcome_level ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g, data = penguins_training_mod)
tidy(multinom_model2, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE)
summary(multinom_model2)
multinom_model3 <- multinom(outcome_level ~ bill_length_mm + bill_depth_mm  + body_mass_g, data = penguins_training_mod)
tidy(multinom_model3, conf.int = FALSE, conf.level = 0.95, exponentiate = FALSE)
summary(multinom_model3)
predictTest_mod = predict(multinom_model3, type = "probs", newdata = penguins_testing)
predictTest_mod = data.frame(predictTest_mod)
head(predictTest_mod)
target_test <- colnames(predictTest_mod)[apply(predictTest_mod,1,which.max)]
penguins_testing$target = target_test
cmx_test <- table(penguins_testing$target, penguins_testing$target == penguins_testing$species)
cmx_test
getwd()
setwd('C:/Users/zalexander/Desktop/data622_cunysps/Homework1')
getwd()
